import 'package:customer_hailing/core/app_export.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

class ThemeHelper {
  // The current app theme
  final _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  final Map<String, PrimaryColors> _supportedCustomColor = {'primary': PrimaryColors()};

// A map of color schemes supported by the app
  final Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map
    var colorScheme = _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;

    return ThemeData(
      visualDensity: VisualDensity.compact,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.white,
      appBarTheme: AppBarTheme(
          iconTheme: IconThemeData(
            color: appTheme.black,
          ),
          systemOverlayStyle: const SystemUiOverlayStyle(
            statusBarColor: Colors.transparent,
            statusBarIconBrightness: Brightness.dark,
          ),
          titleTextStyle: TextStyle(
            color: appTheme.black,
            fontSize: 18.adaptSize,
            fontFamily: 'br_omny',
            fontWeight: FontWeight.w600,
          ),
          centerTitle: true,
          surfaceTintColor: Colors.white),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: const Color(0xFF9c7de2),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          textStyle: const TextStyle(
            color: Colors.white,
            fontSize: 16,
            fontFamily: 'Poppins',
            fontWeight: FontWeight.w600,
          ),
          padding: EdgeInsets.symmetric(horizontal: 16.h),
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: colorScheme.primary,
            width: 1,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(24),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: WidgetStateColor.resolveWith((states) {
          if (states.contains(WidgetState.selected)) {
            return colorScheme.primary;
          }
          return Colors.white;
        }),
        checkColor: WidgetStateColor.resolveWith((states) {
          if (states.contains(WidgetState.selected)) {
            return colorScheme.primary;
          }
          return Colors.transparent;
        }),
        side: const BorderSide(
          width: 1,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: colorScheme.primaryContainer.withOpacity(0.2),
      ),
      dialogBackgroundColor: Colors.white,
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => const TextTheme(
      bodyLarge: TextStyle(
          color: Color(0xDD000000),
          fontSize: 16,
          fontFamily: 'br_omny',
          fontWeight: FontWeight.w400,
          letterSpacing: 0.5),
      bodyMedium: TextStyle(
          color: Color(0xDD000000),
          fontSize: 14,
          fontFamily: 'br_omny',
          fontWeight: FontWeight.w400,
          letterSpacing: 0.25),
      bodySmall: TextStyle(
          color: Color(0x8a000000),
          fontSize: 12,
          fontFamily: 'br_omny',
          fontWeight: FontWeight.w400,
          letterSpacing: 0.4),
      displayLarge: TextStyle(
          color: Color(0x8a000000),
          fontSize: 96,
          fontFamily: 'br_omny',
          fontWeight: FontWeight.w300,
          letterSpacing: -1.5),
      displayMedium: TextStyle(
          color: Color(0x8a000000),
          fontSize: 34,
          fontFamily: 'br_omny',
          fontWeight: FontWeight.w300,
          letterSpacing: -0.5),
      displaySmall: TextStyle(
        color: Color(0x8a000000),
        fontSize: 48,
        fontFamily: 'br_omny',
        fontWeight: FontWeight.w400,
      ),
      headlineMedium: TextStyle(
        color: Color(0x8a000000),
        fontSize: 28,
        fontFamily: 'br_omny',
        fontWeight: FontWeight.w400,
      ),
      headlineSmall: TextStyle(
        color: Color(0xdd000000),
        fontSize: 24,
        fontFamily: 'br_omny',
        fontWeight: FontWeight.w400,
      ),
      labelLarge: TextStyle(
        color: Color(0xdd000000),
        fontSize: 12,
        fontFamily: 'br_omny',
        fontWeight: FontWeight.w600,
      ),
      labelMedium: TextStyle(
        color: Color(0xFF000000),
        fontSize: 10,
        fontFamily: 'br_omny',
        fontWeight: FontWeight.w500,
      ));
}

class ColorSchemes {
  static const primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0xFF7145D6),

    primaryContainer: Color(0xFF6200EE),
    secondaryContainer: Color(0xFF03DAC6),

    surface: Color(0xFF9c7de2),
    onSurface: Color(0xFF000000),

    // Error colors
    errorContainer: Color(0xFFB00020),
    onError: Color(0xFFFFFFFF),
    onErrorContainer: Color(0xFFFFFFFF),

    // On colors(text colors)
    onPrimary: Color(0xFF000000),
    onPrimaryContainer: Color(0xFFFFFFFF),
  );

  static const darkColorScheme = ColorScheme.dark(
    primary: Color(0xFF141218),
    secondary: Color(0xFFCCC2DC),

    surface: Color(0xFF141218),

    primaryContainer: Color(0xFF4f378b),
    secondaryContainer: Color(0xFF4a4458),

    // Error colors
    onError: Color(0xFF01410),
    errorContainer: Color(0xFF8c1d18),
    onErrorContainer: Color(0xFFf9dedc),

    // On colors(text colors)
    onPrimary: Color(0xFF381e72),
    onPrimaryContainer: Color(0xFFeaddff),
  );
}

class PrimaryColors {
  Color get colorPrimary => const Color(0xFF7145D6);
  Color get colorSecondary => const Color(0xFFEFE9FA);

  // White
  Color get white => const Color(0xFFFFFFFF);

  Color get grayBlack => const Color(0xFF616A7D);

  // DeepOrange
  Color get primaryLight => const Color(0xFFAA8FE6);
  Color get primaryDark => const Color(0xFF5A37AB);

  Color get error => const Color(0xFFB00020);

  // Gray
  Color get gray100 => const Color(0xFFF4F4F5);
  Color get gray => const Color(0x19C2C2C2);
  Color get fillGray => const Color(0xFF7C7C7C);
  Color get grayText => const Color(0xFF616A7D);

  // Green
  Color get green600 => const Color(0xFF27AE60);
  Color get green900 => const Color(0xFF008000);

  // black
  Color get black => const Color(0xFF000000);

  // Pink
  Color get pink => const Color(0xFF8A413E);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
